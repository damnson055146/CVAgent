version: '3.8'

services:
  # PostgreSQL数据库
  postgres:
    image: postgres:15-alpine
    container_name: cvagent_postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-cvagent}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./config/sql_postgre:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - cvagent_network

  # Redis缓存
  redis:
    image: redis:7-alpine
    container_name: cvagent_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - cvagent_network

  # 数据库初始化服务
  db-init:
    image: postgres:15-alpine
    container_name: cvagent_db_init
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: ${POSTGRES_DB:-cvagent}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
    volumes:
      - ./init-db.sh:/init-db.sh
      - ./config/sql_postgre:/app/config/sql_postgre
    command: ["/bin/bash", "/init-db.sh"]
    networks:
      - cvagent_network

  # 后端API服务
  backend:
    build: .
    container_name: cvagent_backend
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      db-init:
        condition: service_completed_successfully
    environment:
      # 数据库配置
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@postgres:5432/${POSTGRES_DB:-cvagent}
      
      # Redis配置
      REDIS_URL: redis://redis:6379/0
      
      # API密钥配置
      API_KEY: ${API_KEY}
      
      # Dify配置
      DIFY_API_URL: ${DIFY_API_URL}
      DIFY_API_KEY_PARSE: ${DIFY_API_KEY_PARSE}
      DIFY_API_KEY_REWRITE: ${DIFY_API_KEY_REWRITE}
      DIFY_API_KEY_EXPAND: ${DIFY_API_KEY_EXPAND}
      DIFY_API_KEY_CONTRACT: ${DIFY_API_KEY_CONTRACT}
      DIFY_API_KEY_PROCESS_TEXT: ${DIFY_API_KEY_PROCESS_TEXT}
      DIFY_API_KEY_PERSONAL_STATEMENT: ${DIFY_API_KEY_PERSONAL_STATEMENT}
      DIFY_API_KEY_RECOMMENDATION: ${DIFY_API_KEY_RECOMMENDATION}
      DIFY_API_KEY_PROMPT_BASED: ${DIFY_API_KEY_PROMPT_BASED}
      DIFY_API_KEY_NAMING: ${DIFY_API_KEY_NAMING}
      
      # AI服务配置
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      OPENAI_BASE_URL: ${OPENAI_BASE_URL}
      OPENAI_MODEL: ${OPENAI_MODEL}
      SILICONFLOW_API_KEY: ${SILICONFLOW_API_KEY}
      SILICONFLOW_BASE_URL: ${SILICONFLOW_BASE_URL}
      SILICONFLOW_MODEL: ${SILICONFLOW_MODEL}
      
      # 缓存配置
      SOFT_CACHE_SIZE: ${SOFT_CACHE_SIZE:-1000}
      HARD_CACHE_TTL: ${HARD_CACHE_TTL:-86400}
      REDIS_TTL: ${REDIS_TTL:-3600}
      
      # 用户画像配置
      USER_PROFILE_ALIGNMENT_ENABLED: ${USER_PROFILE_ALIGNMENT_ENABLED:-true}
    ports:
      - "8699:8699"
    volumes:
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8699/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - cvagent_network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:

networks:
  cvagent_network:
    driver: bridge